>>> from 2-matrix_divided import matrix_divided

# Test avec une matrice normale et diviseur positif
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Vérifie que la matrice originale n'est pas modifiée
>>> matrix
[[1, 2, 3], [4, 5, 6]]

# Test avec diviseur négatif
>>> matrix_divided(matrix, -2)
[[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

# Test avec flottants
>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 2)
[[0.75, 1.25], [1.75, 2.25]]

# Test avec diviseur égal à 0 (doit lever ZeroDivisionError)
>>> try:
...     matrix_divided(matrix, 0)
... except ZeroDivisionError as e:
...     print(e)
division by zero

# Test avec diviseur non numérique (doit lever TypeError)
>>> try:
...     matrix_divided(matrix, "2")
... except TypeError as e:
...     print(e)
div must be a number

# Test avec élément non numérique dans la matrice (doit lever TypeError)
>>> try:
...     matrix_divided([[1, 2], [3, "a"]], 2)
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats

# Test avec ligne de taille différente (doit lever TypeError)
>>> try:
...     matrix_divided([[1, 2], [3, 4, 5]], 2)
... except TypeError as e:
...     print(e)
Each row of the matrix must have the same size

# Test avec matrice vide
>>> matrix_divided([[], []], 1)
[[], []]

# Test avec matrice non liste de listes (doit lever TypeError)
>>> try:
...     matrix_divided("not a matrix", 2)
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats
